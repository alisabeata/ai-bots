1.  get stream as a binary data directly

async function* readVideoStream(response: Response): AsyncGenerator<Uint8Array> {
    const reader = response.body!.getReader();
    while (true) {
        const { done, value } = await reader.read();
        if (done) {
            break; // Stream has ended
        }
        // Yield the raw binary data
        yield value;
    }
}


2. probÂ¡vide it to the video processing library

2.1. MediaSource Extensions (MSE)
   Appends binary chunks (Uint8Array) to the SourceBuffer as they become available

const videoElement = document.getElementById('video');
const mediaSource = new MediaSource();

videoElement.src = URL.createObjectURL(mediaSource);

mediaSource.addEventListener('sourceopen', () => {
    const sourceBuffer = mediaSource.addSourceBuffer('video/webm; codecs="vp8"'); // Specify the correct MIME type
    sourceBuffer.addEventListener('updateend', () => {
        if (!sourceBuffer.updating && mediaSource.readyState === 'open') {
            mediaSource.endOfStream();
        }
    });

    // Assuming `videoDataChunks` is an array of Uint8Array chunks from your video stream
    videoDataChunks.forEach(chunk => {
        sourceBuffer.appendBuffer(chunk);
    });
});

// Handle errors
mediaSource.addEventListener('error', () => {
    console.error('MediaSource encountered an error!');
});


2.2. Convert to a Blob and Use URL.createObjectURL
   Efficient for smaller videos or scenarios where the video doesn't need to be streamed but simply played back.

const videoElement = document.getElementById('video');
const videoData = new Uint8Array([...]); // Your full video data as a Uint8Array
const blob = new Blob([videoData], { type: 'video/mp4' }); // Specify the correct MIME type

videoElement.src = URL.createObjectURL(blob);



- in case of audio:

<audio id="audioPlayer" controls></audio>

async function fetchAudioChunks(sourceBuffer) {
    const baseUrl = 'http://example.com/audioChunks';
    let chunkIndex = 0;

    try {
        // Continuously fetch new chunks
        while (true) {
            const response = await fetch(`${baseUrl}/${chunkIndex}.mp4`);
            if (!response.ok) throw new Error('Network response was not ok');
            const data = await response.arrayBuffer();

            // Wait until the source buffer is ready to accept new data
            if (sourceBuffer.updating) {
                await new Promise(resolve => sourceBuffer.addEventListener('updateend', resolve, { once: true }));
            }

            // Append the fetched data to the source buffer
            sourceBuffer.appendBuffer(data);

            // Increment the chunk index or handle loop/reset logic
            chunkIndex++;

            // Simulate a delay if needed (for example, in live streaming scenarios, wait for new data availability)
            await new Promise(resolve => setTimeout(resolve, 1000)); // Adjust timing based on real data rate
        }
    } catch (error) {
        console.error('Failed to load audio chunk:', error);
    }
}

// Existing MSE setup code
if (MediaSource.isTypeSupported('audio/mp4; codecs="mp4a.40.2"')) {
    const mediaSource = new MediaSource();
    const audio = document.createElement('audio');
    audio.controls = true;
    document.body.appendChild(audio);
    audio.src = URL.createObjectURL(mediaSource);

    mediaSource.addEventListener('sourceopen', function () {
        const sourceBuffer = mediaSource.addSourceBuffer('audio/mp4; codecs="mp4a.40.2"');
        fetchAudioChunks(sourceBuffer);
    });
}

